<!doctype html>
<html lang="pt-br">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Visualizador 3D de Pe√ßas (.OBJ)</title>
    <style>
      body { margin:0; overflow:hidden; background:#0b0f14; color:#eaeaea; font-family:system-ui; }
      #ui {
        position:fixed; top:10px; left:10px; display:flex; gap:10px; z-index:10;
        background:rgba(0,0,0,0.5); padding:10px; border-radius:10px;
      }
      button, input[type=file] {
        background:#1b2735; color:#fff; border:none; border-radius:8px;
        padding:8px 12px; cursor:pointer; font-size:14px;
      }
      button:hover { background:#273b50; }
    </style>
  </head>
  <body>
    <div id="ui">
      <input type="file" id="fileInput" accept=".obj" />
      <button id="rotateLeft">‚ü≤ Esquerda</button>
      <button id="rotateRight">‚ü≥ Direita</button>
      <button id="insideView">Entrar no Ambiente</button>
    </div>

    <canvas id="sceneCanvas"></canvas>

    <!-- üîπ Bibliotecas via CDN -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/OBJLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>

    <script>
      // üîπ Renderer
      const renderer = new THREE.WebGLRenderer({canvas:document.getElementById('sceneCanvas'), antialias:true});
      renderer.setSize(window.innerWidth, window.innerHeight);

      // üîπ Cena e skybox
      const scene = new THREE.Scene();
      const cubeLoader = new THREE.CubeTextureLoader();
      const skybox = cubeLoader.load([
        'cube_right.png',
        'cube_left.png',
        'cube_up.png',
        'cube_down.png',
        'cube_back.png',
        'cube_front.png',
      ]);
      scene.background = skybox;

      // üîπ C√¢mera e controles
      const camera = new THREE.PerspectiveCamera(60, innerWidth/innerHeight, 0.1, 1000);
      camera.position.set(0,2,5);
      const controls = new THREE.OrbitControls(camera, renderer.domElement);

      // üîπ Luzes
      const dirLight = new THREE.DirectionalLight(0xffffff, 1);
      dirLight.position.set(5,10,7);
      scene.add(dirLight);
      scene.add(new THREE.AmbientLight(0x404040));

      // üîπ Carregamento do arquivo .OBJ
      let object3D = null;
      document.getElementById('fileInput').onchange = e => {
        if (!e.target.files.length) return;
        const reader = new FileReader();
        reader.onload = ev => {
          const loader = new THREE.OBJLoader();
          const obj = loader.parse(ev.target.result);
          if (object3D) scene.remove(object3D);
          object3D = obj;
          obj.traverse(c => c.isMesh && (c.material = new THREE.MeshStandardMaterial({color:0xcccccc, metalness:0.4, roughness:0.6})));
          const box = new THREE.Box3().setFromObject(obj);
          const center = box.getCenter(new THREE.Vector3());
          obj.position.sub(center);
          scene.add(obj);
        };
        reader.readAsText(e.target.files[0]);
      };

      // üîπ Bot√µes de intera√ß√£o
      document.getElementById('rotateLeft').onclick = () => object3D && (object3D.rotation.y -= Math.PI / 8);
      document.getElementById('rotateRight').onclick = () => object3D && (object3D.rotation.y += Math.PI / 8);
      let inside = false;
      document.getElementById('insideView').onclick = () => {
        inside = !inside;
        if (object3D) {
          const box = new THREE.Box3().setFromObject(object3D), c = box.getCenter(new THREE.Vector3());
          if (inside) { camera.position.copy(c); controls.target.copy(c); }
          else { camera.position.set(0,2,5); controls.target.set(0,0,0); }
        }
      };

      // üîπ Responsividade
      addEventListener('resize', () => {
        camera.aspect = innerWidth / innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(innerWidth, innerHeight);
      });

      // üîπ Loop de renderiza√ß√£o
      (function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      })();
    </script>
  </body>
</html>
